"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[440],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(n),p=r,h=u["".concat(l,".").concat(p)]||u[p]||d[p]||a;return n?o.createElement(h,i(i({ref:t},m),{},{components:n})):o.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:3},i="Themes",s={unversionedId:"guides/themes",id:"guides/themes",title:"Themes",description:"Themes allow you to change the colors of various components provided by library. You can use themes to:",source:"@site/docs/guides/themes.md",sourceDirName:"guides",slug:"/guides/themes",permalink:"/react-native-unicorn-modals/docs/guides/themes",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Custom components",permalink:"/react-native-unicorn-modals/docs/guides/renderable-components/custom-components"},next:{title:"Animations",permalink:"/react-native-unicorn-modals/docs/guides/animations"}},l={},c=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Change and extend themes",id:"change-and-extend-themes",level:2},{value:"Access theme object in components",id:"access-theme-object-in-components",level:2}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"themes"},"Themes"),(0,r.kt)("p",null,"Themes allow you to change the colors of various components provided by library. You can use themes to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Switch between light and dark mode"),(0,r.kt)("li",{parentName:"ul"},"Customize the colors match your brand")),(0,r.kt)("p",null,"Also you can extend themes to add additional colors for your custom components."),(0,r.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"Library contains 2 default theme:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"defaultThemeLight")," - default"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"defaultThemeDark"))),(0,r.kt)("p",null,"By default light theme is used. You can pass any of them to ",(0,r.kt)("inlineCode",{parentName:"p"},"ModalProvider"),", or switch between them like in next example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/App.js",title:"src/App.js"},"import React, { useCallback, useState } from 'react';\nimport {\n  createModalProvider,\n  Alert,\n  // 1. Import default themes\n  // highlight-start\n  defaultThemeDark,\n  defaultThemeLight,\n  // highlight-end\n} from 'react-native-unicorn-modals';\n\nconst ModalProvider = createModalProvider({ alert: Alert });\n\nconst App = () => {\n  const [theme, setTheme] = useState('dark');\n\n  // Switch theme somewhere in your app.\n  const switchTheme = useCallback(() => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  }, [theme]);\n\n  return (\n    // 2. Pass theme object into provider component as prop\n    // highlight-next-line\n    <ModalProvider theme={theme === 'dark' ? defaultThemeDark : defaultThemeLight}>\n      {/* <YourAppComponent switchTheme={switchTheme} /> */}\n    </ModalProvider>\n  );\n};\n\nexport default App;\n")),(0,r.kt)("h2",{id:"change-and-extend-themes"},"Change and extend themes"),(0,r.kt)("p",null,"If you are creating your own component, you might need to add more colors than the library provides by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/my-theme.js",title:"src/my-theme.js"},"// 1. Import default theme\nimport { defaultThemeLight } from 'react-native-unicorn-modals';\n\n// 2. Extend it with your properties\nconst myTheme = {\n  ...defaultThemeLight,\n  actionButtonColor: {\n    ...defaultThemeLight.actionButtonColor,\n    destructive: 'red', // Change default destructive button color\n  },\n  titleTextColor: '#111', // Change default title color\n  myCustomColor: 'red', // Add new property to use in your component\n};\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"It is recommended to extend from the default theme (light or dark) to ensure that you do not miss any property.")),(0,r.kt)("h2",{id:"access-theme-object-in-components"},"Access theme object in components"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTheme")," hook inside any component which is rendered inside ",(0,r.kt)("inlineCode",{parentName:"p"},"ModalProvider")," to get access to theme object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { useTheme } from 'react-native-unicorn-modals';\n\nfunction MyButton() {\n  const { actionButtonColor } = useTheme();\n\n  return (\n    <View style={{ backgroundColor: actionButtonColor.destructive }}>\n      <Text>Button</Text>\n    </View>\n  );\n}\n")))}u.isMDXComponent=!0}}]);