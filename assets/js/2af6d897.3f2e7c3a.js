"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[462],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=o,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1121:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:6},i="TypeScript",s={unversionedId:"guides/typescript",id:"guides/typescript",title:"TypeScript",description:"Example app is using TypeScript.",source:"@site/docs/guides/typescript.md",sourceDirName:"guides",slug:"/guides/typescript",permalink:"/react-native-unicorn-modals/docs/guides/typescript",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Class components",permalink:"/react-native-unicorn-modals/docs/guides/class-components"},next:{title:"Alert",permalink:"/react-native-unicorn-modals/docs/api/renderable-components/alert"}},p={},l=[{value:"<code>createModalProvider</code>",id:"createmodalprovider",level:2},{value:"<code>useModals</code>",id:"usemodals",level:2},{value:"<code>useTheme</code>",id:"usetheme",level:2}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typescript"},"TypeScript"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/inferusvv/react-native-unicorn-modals/tree/main/example"},"Example app")," is using TypeScript.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Author note")),(0,o.kt)("p",{parentName:"admonition"},"TypeScript coverage outside library seems to be good enough. But in my opinion it is not ideal as well as inside library. If you have your own ideas, suggestions, etc. - please ",(0,o.kt)("strong",{parentName:"p"},"open ticket to discuss")," or ",(0,o.kt)("strong",{parentName:"p"},"create merge request")," with your solution \ud83d\udcaa")),(0,o.kt)("h2",{id:"createmodalprovider"},(0,o.kt)("inlineCode",{parentName:"h2"},"createModalProvider")),(0,o.kt)("p",null,"Most important part is to create ",(0,o.kt)("inlineCode",{parentName:"p"},"UnicornModalsComponents")," interface and describe data objects for each component there. It will also be used in hooks below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/types.ts",title:"src/types.ts"},"import { AlertData } from 'react-native-unicorn-modals';\n\ninterface MyComponentData {\n  title: string;\n}\n\n// highlight-start\nexport interface UnicornModalsComponents {\n  alert: AlertData;\n  myComponent: MyComponentData;\n}\n// highlight-end\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/App.ts",title:"src/App.ts"},"import { createModalProvider } from 'react-native-unicorn-modals';\n// highlight-next-line\nimport { UnicornModalsComponents } from './types.ts';\n\n// highlight-next-line\nconst Provider = createModalProvider<UnicornModalsComponents>({\n  alert: Alert,\n  myComponent: MyComponent,\n});\n")),(0,o.kt)("h2",{id:"usemodals"},(0,o.kt)("inlineCode",{parentName:"h2"},"useModals")),(0,o.kt)("p",null,"It is possible to check your data object depending on the component name, which you are showing."),(0,o.kt)("p",null,"You need to create a wrapper hook named ",(0,o.kt)("inlineCode",{parentName:"p"},"useAppModals")," (or whatever name you want) around ",(0,o.kt)("inlineCode",{parentName:"p"},"useModals"),", where you should add interface from ",(0,o.kt)("inlineCode",{parentName:"p"},"src/types.ts"),". You should import this hook in your app instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"useModals")," from library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/hooks/useAppModals.ts",title:"src/hooks/useAppModals.ts"},"import { useModals } from 'react-native-unicorn-modals';\nimport { UnicornModalsComponents } from '../types.ts';\n\n// highlight-start\nexport default function useAppModals() {\n  return useModals<UnicornModalsComponents>();\n}\n// highlight-end\n")),(0,o.kt)("h2",{id:"usetheme"},(0,o.kt)("inlineCode",{parentName:"h2"},"useTheme")),(0,o.kt)("p",null,"Here we will go in the same way as with ",(0,o.kt)("inlineCode",{parentName:"p"},"useModals"),". To extends from default theme - import ",(0,o.kt)("inlineCode",{parentName:"p"},"Theme")," generic and put interface with new style props into it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/types.ts",title:"src/types.ts"},"import type { Theme } from 'react-native-unicorn-modals';\n\n// highlight-start\ninterface AdditionalThemeProps {\n  buttonColor: string;\n}\n// highlight-end\n\n// highlight-start\nexport type AppTheme = Theme<AdditionalThemeProps>;\n// highlight-end\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You may not use ",(0,o.kt)("inlineCode",{parentName:"p"},"Theme")," generic (for example you are not planning use internal components and not extending from default theme). Just export your own theme interface.")),(0,o.kt)("p",null,"Then simply create wrapper hook around internal ",(0,o.kt)("inlineCode",{parentName:"p"},"useTheme")," with type and use this hook instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"useTheme")," from library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/hooks/useAppTheme.ts",title:"src/hooks/useAppTheme.ts"},"import { useTheme } from 'react-native-unicorn-modals';\nimport { AppTheme } from '../types.ts';\n\n// highlight-start\nexport default function useAppTheme() {\n  return useTheme<AppTheme>();\n}\n// highlight-end\n")))}m.isMDXComponent=!0}}]);